syntax = "proto3";

option csharp_namespace = "IdpServiceFacade";

package user;

// The user service definition.
service User {
  // Initiates a password reset
  rpc InitiatePasswordReset (UserRequest) returns (InitiatePasswordResetReply);
  rpc InitiateForcedLogin (UserRequest) returns (UserReply);
  rpc InitiateLockout (UserRequest) returns (UserReply);
  rpc MarkAsSuspicious (UserRequest) returns (UserReply);
  rpc MarkAsFraud (UserRequest) returns (UserReply);
  rpc InitiateLegalHold (UserRequest) returns (UserReply);
  rpc ChangePassword (UserChangePasswordRequest) returns (UserReply);
  rpc DisableMfa (UserRequest) returns (UserReply);
  rpc BlockUser (UserRequest) returns (UserReply);
  rpc UnblockUser (UserRequest) returns (UserReply);
  rpc AssignRole (UserRoleRequest) returns (UserReply);
  rpc RemoveRole (UserRoleRequest) returns (UserReply);
  rpc GetUserMetadata (UserMetadataRequest) returns (UserMetadataReply);
  rpc GetToken (GetTokenAuthRequest) returns (GetTokenAuthReply);
  rpc GetRefreshToken (GetRefreshTokenAuthRequest) returns (GetTokenAuthReply);
  rpc GetUser (UserId) returns (UserResponse);
  rpc GetUsersMetadataByNameOrEmailFragment (UsersMetadataByNameOrEmailFragmentRequest) returns (UsersMetadataReply);
  rpc GetUsersMetadataByNameOrEmailFragmentAndOrgUid (UsersMetadataByNameOrEmailFragmentAndOrgUidRequest) returns (UsersMetadataReply);
  rpc GetUsersMetadataByNameFragment (UsersMetadataByNameFragmentRequest) returns (UsersMetadataReply);
  rpc GetUsersMetadataByEmailFragment (UsersMetadataByEmailFragmentRequest) returns (UsersMetadataReply);
  rpc GetUsersMetadataByEmailAddresses (GetUsersMetadataByEmailAddressesRequest) returns (UsersMetadataReply);
  rpc GetUsers(UsersSearchRequest) returns (UserSearchResponse);
  rpc GetUsersByIds (UserIds) returns (UserResponseList);
  rpc EnableMfa(UserRequest) returns (UserReply);
  rpc CreateUser (CreateUserRequest) returns (UserReply);
  rpc CreateApplicant (CreateApplicantRequest) returns (UserReply);
  rpc UpdateUserProfile (UpdateUserProfileRequest) returns (UserReply);
  rpc UpdateVerifiedEmail (UpdateVerifiedUserEmailRequest) returns (UserReply);
}

message CreateApplicantRequest{
  string firstName = 1;
  string lastName = 2;
  string email = 3;
}

message CreateUserRequest {
  UserRole role = 1;
  string firstName = 2;
  string lastName = 3;
  string email = 4;
}

enum UserRole {
  Applicant = 0;
}

// The request message containing the user's email.
message UserRequest {
  string email = 1;
}

message GetUsersMetadataByEmailAddressesRequest {
  repeated string emailAddresses = 1;
  optional KeysWrapper keys = 2;
}

message UserRoleRequest {
  string email = 1;
  string role = 2;
}

message UserChangePasswordRequest {
  string email = 1;
  string password = 2;
}

message UsersMetadataByNameOrEmailFragmentRequest {
  string searchTerm = 1;
  optional KeysWrapper keys = 2;
}

message UsersMetadataByNameOrEmailFragmentAndOrgUidRequest {
  string searchTerm = 1;
  string OrgUid = 2;
  optional KeysWrapper keys = 3;
}

message UsersMetadataByNameFragmentRequest {
  string searchTerm = 1;
  optional KeysWrapper keys = 2;
}

message UsersMetadataByEmailFragmentRequest {
  string searchTerm = 1;
  optional KeysWrapper keys = 2;
}


message UserMFARequest {
  string email = 1;
  bool enable = 2;
}

// The response message containing the outcome.
message UserReply {
  bool ok = 1;
  string error = 2;
}

message UserMetadataRequest {
   string email = 1;
   optional KeysWrapper keys = 2;
}

message KeysWrapper {
  repeated string key = 1;
}

message UserMetadataReply {
   map<string,string> metadata = 1;
}


message GetTokenAuthRequest {
   string username = 1;
   string password = 2;
   optional KeysWrapper keys = 3;
}

message GetRefreshTokenAuthRequest {
   string refreshtoken = 1;
   optional KeysWrapper keys = 2;
}

message GetTokenAuthReply {
   string accesstoken = 1;
   string scope = 2;
   string expiresin = 3;
   string tokentype = 4;
   optional string refreshtoken = 5;
   string error = 6;
}

message UsersMetadataReply {
  repeated UserWithMetadata users = 1;
}


message UserWithMetadata {
  map<string, UserMetadataReply> user = 1;
}


message Identity {
  string user_id = 1;
}

message UserResponse {
  string email = 1;
  bool email_verified = 2;
  string phone_number = 3;
  bool phone_verified = 4;
  string user_metadata = 5;
  string username = 6;
  optional string nickname = 7;
  optional string given_name = 8;
  string name = 9;
  string family_name = 10;
  string picture = 11;
  bool blocked = 12;
  repeated Identity identities = 13;
  string last_ip = 14;
  string last_login = 15;
  string user_id = 16;
}

message UserId{
  string id = 1;
}

message InitiatePasswordResetReply {
  string token = 1;
}

message UserIds{
  repeated string ids = 1;
}

message UserResponseList{
  repeated UserResponse UserResponseList=1;
}

message UsersSearchRequest {
  string text = 1;
}

message UserSearchResponse{
  repeated UserResponse users = 1;
}

message UpdateUserProfileRequest {
  string identityId = 1;
  string email = 2;
  string firstName = 3;
  string lastName = 4;
  string phoneNumber = 5;
  string businessName = 6;
  string businessEmail = 7;
  string businessPhone = 8;
  string addressLine1 = 9;
  string addressLine2 = 10;
  string city = 11;
  string state = 12;
  string zip = 13;
  bool isAddressUpdated = 14;
  bool isBusinessUpdated = 15;
  string roleId = 16;
  bool isRoleUpdated = 17;
}

message UpdateVerifiedUserEmailRequest{
  string identityId = 1;
  string email = 2;
}
