syntax = "proto3";

option csharp_namespace = "IdpServiceFacade";

package user;
//import "google/protobuf/timestamp.proto";
//import "google/protobuf/struct.proto";

// The user service definition.
service User {
  // Initiates a password reset
  rpc InitiatePasswordReset (UserRequest) returns (InitiatePasswordResetReply);
  rpc InitiateForcedLogin (UserRequest) returns (UserReply);
  rpc InitiateLockout (UserRequest) returns (UserReply);
  rpc MarkAsSuspicious (UserRequest) returns (UserReply);
  rpc MarkAsFraud (UserRequest) returns (UserReply);
  rpc InitiateLegalHold (UserRequest) returns (UserReply);
  rpc ChangePassword (UserChangePasswordRequest) returns (UserReply);
  rpc DisableMfa (UserRequest) returns (UserReply);
  rpc BlockUser (UserRequest) returns (UserReply);
  rpc UnblockUser (UserRequest) returns (UserReply);
  rpc AssignRole (UserRoleRequest) returns (UserReply);
  rpc RemoveRole (UserRoleRequest) returns (UserReply);
  rpc GetUserMetadata (UserMetadataRequest) returns (UserMetadataReply);
  rpc GetUser (UserId) returns (UserResponse);
  rpc GetUsersMetadataByNameOrEmailFragment (UsersMetadataByNameOrEmailFragmentRequest) returns (UsersMetadataReply);
  rpc GetUsers(UsersSearchRequest) returns (UserSearchResponse);
  rpc GetUsersByIds (UserIds) returns (UserResponseList);
}

// The request message containing the user's email.
message UserRequest {
  string email = 1;
}

message UserRoleRequest {
  string email = 1;
  string role = 2;
}

message UserChangePasswordRequest {
  string email = 1;
  string password = 2;
}

message UsersMetadataByNameOrEmailFragmentRequest {
  string searchTerm = 1;
  optional KeysWrapper keys = 2;
}

// The response message containing the outcome.
message UserReply {
  bool ok = 1;
  string error = 2;
}

message UserMetadataRequest {
  string email = 1;
  optional KeysWrapper keys = 2;
}

message KeysWrapper {
  repeated string key = 1;
}

message UserMetadataReply {
  map<string, string> metadata = 1;
}

message UsersMetadataReply {
  repeated UserWithMetadata users = 1;
}

message UserWithMetadata {
  map<string, UserMetadataReply> user = 1;
}


message Identity {
  string user_id = 1;
}

message UserResponse {
  string email = 1;
  bool email_verified = 2;
  string phone_number = 3;
  bool phone_verified = 4;
  string user_metadata = 5;
  string username = 6;
  optional string nickname = 7;
  optional string given_name = 8;
  string name = 9;
  string family_name = 10;
  string picture = 11;
  bool blocked = 12;
  repeated Identity identities = 13;
  string last_ip = 14;
  string last_login = 15;
  string user_id = 16;
}

message UserId{
  string id = 1;
}

message InitiatePasswordResetReply {
  string token = 1;
}

message UserIds{
  repeated string ids = 1;
}

message UserResponseList{
  repeated UserResponse UserResponseList=1;
}

message UsersSearchRequest {
  string text = 1;
}

message UserSearchResponse{
  repeated UserResponse users = 1;
}
