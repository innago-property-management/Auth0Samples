namespace Auth0Client;

using System;
using System.Collections.Generic;
using System.Threading;
using System.Threading.Tasks;

using Abstractions;

using Auth0.ManagementApi.Models;

using Innago.Shared.TryHelpers;

using MorseCode.ITask;

public partial class Auth0Client
{
    /// <summary>
    ///     Creates a new role in the Auth0 system with the specified name and optional description.
    /// </summary>
    /// <param name="roleName">The name of the role to be created. This value is required and must be unique.</param>
    /// <param name="description">An optional description for the role. If not provided, an empty string will be used.</param>
    /// <param name="cancellationToken">A cancellation token used to cancel the operation if needed.</param>
    /// <returns>
    ///     An instance of <see cref="OkError" /> indicating whether the operation was successful, or an error message if
    ///     it failed.
    /// </returns>
    public async ITask<OkError> CreateRole(string roleName, string? description = null, CancellationToken cancellationToken = default)
    {
        RoleCreateRequest request = new()
        {
            Name = roleName,
            Description = description ?? string.Empty,
        };

        Result<Role?> createResult = await TryHelpers.TryAsync(() => client.Roles.CreateAsync(request, cancellationToken)!).ConfigureAwait(false);

        OkError assignResult = await createResult.Map<Task<OkError>>(role => this.AddPermissionToRole(role!.Id, roleName, cancellationToken),
            exception => Task.FromException<OkError>(exception!))!;

        return assignResult;
    }

    private async Task<OkError> AddPermissionToRole(string roleId, string roleName, CancellationToken cancellationToken)
    {
        Result<ResourceServer?> resourceServerResult =
            await TryHelpers.TryAsync(() => client.ResourceServers.GetAsync(settings.Value.ApiAudience, cancellationToken)!).ConfigureAwait(false);

        List<ResourceServerScope> scopes = resourceServerResult.Map(server => server!.Scopes, _ => [])!;

        scopes.Add(new ResourceServerScope()
        {
            Description = $"Autogenerated scope {roleName}",
            Value = roleName,
        });

        ResourceServerUpdateRequest resourceServerUpdateRequest = new()
        {
            Scopes = scopes,
        };

        Result<ResourceServer?> scopeCreateResult = await TryHelpers.TryAsync(() =>
            client.ResourceServers.UpdateAsync(settings.Value.ApiAudience, resourceServerUpdateRequest, cancellationToken)!);

        return await scopeCreateResult.Map(DoIt!, error => Task.FromResult(new OkError { Error = error?.Message ?? string.Empty }))!;

        async Task<OkError> DoIt(ResourceServer server)
        {
            PermissionIdentity permissionIdentity = new()
            {
                Name = roleName,
                Identifier = server.Identifier,
            };

            AssignPermissionsRequest assignPermissionsRequest = new()
            {
                Permissions = [permissionIdentity],
            };

            Result result = await TryHelpers.TryAsync(() => client.Roles.AssignPermissionsAsync(roleId, assignPermissionsRequest, cancellationToken))
                .ConfigureAwait(false);

            return new OkError(result.HasSucceeded, ((Exception?)result)?.Message ?? string.Empty);
        }
    }
}
